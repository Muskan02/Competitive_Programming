Given an integer n, check if it is 

1. Power of 2
return n>0 && !(n&(n-1));

2. Power of 3
Assuming int is of 32 bits
Highest multiple of 3 under 32 bit=> 3^19 = 1162261467(if n divides this then it is a power of 3)
return (n>0 && 1162261467%n==0);


3. Power of 4
The basic idea is that the binary form should contain only one set bit and that too on odd position.
Method 1: if(n>0 && !(n&(n-1)))
          {
            while(n>1)
            {
              n>>=1;
              c++;
            }
          }
          return (c%2==0);
          
Method 2: using built-in function
          if(n>0 && __builtin_popcount(n)==1)
          {
            int k=floor(log2(n)+1);
            return k&1;
          }
