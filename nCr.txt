vector<int> fac(N), invfac(N);
int mod;

int power(int x, int p) {
	int res = 1;
	x %= mod;
	if(!x) return x;
	while(p) {
		if(p & 1)
			res = (res * x) % mod;
		p >>= 1;
		x = (x * x) % mod;
	}
	return res;
}

int modinv(int x) {
	return power(x, mod - 2);
}

void preprocess() {
	fac[0] = fac[1] = 1;
	for(int i = 2; i < N; i ++) {
		fac[i] = (fac[i - 1] * i) % mod;
	}
	invfac[N - 1] = modinv(fac[N - 1]);
	for(int i = N - 2; i >= 0; i --) {
		invfac[i] = (invfac[i + 1] * (i + 1)) % mod;
	}
}

int nCr(int n, int r) {
	if(r > n) return 0;
	int ans = (fac[n] * ((invfac[r] * invfac[n - r]) % mod)) % mod;
	return ans;
}

int nPr(int n, int r) {
	if(r > n) return 0;
	int ans = (fac[n] * invfac[n - r]) % mod;
	return ans;
}
